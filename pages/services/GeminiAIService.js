import { recipes } from "../../data"

const GEMINI_API_KEYS = [
  "AIzaSyDfBE_AOHP2djt966q3MCWAhaDmfX1cswk",
  "AIzaSyCLdLXsChr-UdyxKOE_7fb7D4pXV30sH2M",
  "AIzaSyB6HLEvnswWT7atzfIyCIN-OXUpNTWYB9Q",
  "AIzaSyBmqDcr6r9wRCEiDXTxdh5EskpgJARh6Pw",
  "AIzaSyDGEnd-oHyNAl9q7H0bZkOZoGHowxMGyoM",
  "AIzaSyDHj9VvAiH7DMYwNRFFlPcuWQnTGFxeDBs",
  "AIzaSyDq6LyLflpUdZbO-oA0aiy_PdozqoH66bY",
  "AIzaSyD56T_DXBRTUOJPJhAK_SkyqDbKKCUPhvo"
]

import { GoogleGenerativeAI } from "@google/generative-ai"

class GeminiAIService {
  constructor() {
    this.keys = GEMINI_API_KEYS
    this.currentKeyIndex = 0
    this.restaurantData = recipes
    this.modelName = "gemini-2.0-flash"
    this.systemPrompt = this.buildSystemPrompt()
  }

  getCurrentAPIKey() {
    return this.keys[this.currentKeyIndex]
  }

  rotateKey() {
    this.currentKeyIndex = (this.currentKeyIndex + 1) % this.keys.length
  }

  buildSystemPrompt() {
    const menuData = this.restaurantData.map((dish) => ({
      id: dish.id,
      name: dish.name,
      category: dish.category,
      price: dish.price,
      description: dish.description,
      calories: dish.calories,
      cookingTime: dish.cookingTime,
      ingredients: dish.ingredients?.map((ing) => ing.name).join(", ") || "N/A",
    }))

    return `B·∫°n l√† AI tr·ª£ l√Ω c·ªßa BTN Restaurant - nh√† h√†ng ·∫§n ƒê·ªô. B·∫°n c√≥ ki·∫øn th·ª©c chuy√™n s√¢u v·ªÅ th·ª±c ƒë∆°n v√† c√≥ th·ªÉ:

1. G·ª£i √Ω m√≥n ƒÉn d·ª±a tr√™n s·ªü th√≠ch (cay, ng·ªçt, nh·∫π, ƒë·∫≠m ƒë√†...)
2. T√¨m ki·∫øm m√≥n theo t√™n, nguy√™n li·ªáu, gi√° c·∫£
3. So s√°nh dinh d∆∞·ª°ng v√† calories
4. T∆∞ v·∫•n combo ph√π h·ª£p
5. Th√¥ng tin nh√† h√†ng

TH·ª∞C ƒê∆†N HI·ªÜN T·∫†I:
${JSON.stringify(menuData, null, 2)}

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
- Lu√¥n d·ª±a tr√™n d·ªØ li·ªáu th·ª±c ƒë∆°n tr√™n
- Khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ m√≥n cay: g·ª£i √Ω G√† Tikka Masala, c√°c m√≥n c√≥ gia v·ªã
- Khi h·ªèi m√≥n nh·∫π: g·ª£i √Ω Dal Tadka, Mango Lassi
- Khi h·ªèi m√≥n ch√≠nh: g·ª£i √Ω Biryani, Palak Paneer
- Lu√¥n bao g·ªìm gi√° ti·ªÅn v√† th√¥ng tin chi ti·∫øt
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† chuy√™n nghi·ªáp
- N·∫øu kh√¥ng t√¨m th·∫•y m√≥n ph√π h·ª£p, g·ª£i √Ω m√≥n t∆∞∆°ng t·ª±

H√£y tr·∫£ l·ªùi nh∆∞ m·ªôt chuy√™n gia ·∫©m th·ª±c!`
  }

  async generateResponse(userMessage, retryCount = 0) {
    const currentKey = this.getCurrentAPIKey()
    const genAI = new GoogleGenerativeAI(currentKey)

    try {
      const model = genAI.getGenerativeModel({ model: this.modelName })

      const chat = await model.startChat({
        history: [],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        },
      })

      const result = await chat.sendMessage(
        `${this.systemPrompt}\n\nC√¢u h·ªèi c·ªßa kh√°ch h√†ng: ${userMessage}`
      )

      return result.response.text()

    } catch (error) {
      const errMsg = error?.message || ""

      const isQuotaError = errMsg.includes("429") || errMsg.includes("exceeded your current quota")
      const isOverload = errMsg.includes("model is overloaded") || errMsg.includes("503") || errMsg.includes("timeout")

      if ((isQuotaError || isOverload) && retryCount < this.keys.length - 1) {
        this.rotateKey()
        await new Promise(resolve => setTimeout(resolve, 1000))
        console.log(`üîÑ Th·ª≠ l·∫°i v·ªõi key m·ªõi (#${this.currentKeyIndex + 1})...`)
        return this.generateResponse(userMessage, retryCount + 1)
      }


      return this.getFallbackResponse(userMessage)
    }
  }

  getFallbackResponse(userMessage) {
    const input = userMessage.toLowerCase()

    // T√¨m ki·∫øm c∆° b·∫£n trong d·ªØ li·ªáu
    if (input.includes("cay") || input.includes("spicy")) {
      const spicyDishes = this.restaurantData.filter(
        (dish) =>
          dish.name.toLowerCase().includes("tikka") ||
          dish.name.toLowerCase().includes("masala") ||
          dish.description.toLowerCase().includes("cay"),
      )

      if (spicyDishes.length > 0) {
        let response = "ƒê√¢y l√† nh·ªØng m√≥n cay t√¥i g·ª£i √Ω:\n\n"
        spicyDishes.forEach((dish, index) => {
          response += `${index + 1}. ${dish.name}\n`
          response += `   Gi√°: ${dish.price?.toLocaleString()}ƒë\n`
          response += `   ${dish.description}\n\n`
        })
        return response
      }
    }

    if (input.includes("nh·∫π") || input.includes("healthy")) {
      const lightDishes = this.restaurantData.filter(
        (dish) => dish.calories < 300 || dish.name.toLowerCase().includes("dal") || dish.category === "Beverage",
      )

      if (lightDishes.length > 0) {
        let response = "Nh·ªØng m√≥n nh·∫π nh√†ng cho b·∫°n:\n\n"
        lightDishes.forEach((dish, index) => {
          response += `${index + 1}. ${dish.name}\n`
          response += `   Calories: ${dish.calories} kcal\n`
          response += `   Gi√°: ${dish.price?.toLocaleString()}ƒë\n\n`
        })
        return response
      }
    }

    // Fallback m·∫∑c ƒë·ªãnh
    return "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi:\n\n‚Ä¢ 'C√≥ m√≥n g√¨ cay?'\n‚Ä¢ 'G·ª£i √Ω m√≥n nh·∫π'\n‚Ä¢ 'M√≥n ch√≠nh n√†o ngon?'\n‚Ä¢ 'ƒê·ªì u·ªëng c√≥ g√¨?'\n\nHo·∫∑c li√™n h·ªá nh√¢n vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët h∆°n!"
  }

  // T√¨m ki·∫øm m√≥n ƒÉn theo t·ª´ kh√≥a
  searchDishes(keyword) {
    const searchTerm = keyword.toLowerCase()
    return this.restaurantData.filter(
      (dish) =>
        dish.name.toLowerCase().includes(searchTerm) ||
        dish.description.toLowerCase().includes(searchTerm) ||
        dish.category.toLowerCase().includes(searchTerm) ||
        (dish.ingredients && dish.ingredients.some((ing) => ing.name.toLowerCase().includes(searchTerm))),
    )
  }

  // G·ª£i √Ω m√≥n theo s·ªü th√≠ch
  getRecommendationsByPreference(preference) {
    const pref = preference.toLowerCase()

    if (pref.includes("cay") || pref.includes("spicy")) {
      return this.restaurantData.filter(
        (dish) =>
          dish.name.toLowerCase().includes("tikka") ||
          dish.name.toLowerCase().includes("masala") ||
          dish.description.toLowerCase().includes("cay"),
      )
    }

    if (pref.includes("ng·ªçt") || pref.includes("sweet")) {
      return this.restaurantData.filter(
        (dish) =>
          dish.category === "Dessert" ||
          dish.name.toLowerCase().includes("lassi") ||
          dish.name.toLowerCase().includes("gulab"),
      )
    }

    if (pref.includes("nh·∫π") || pref.includes("light")) {
      return this.restaurantData.filter(
        (dish) => dish.calories < 300 || dish.category === "Beverage" || dish.name.toLowerCase().includes("dal"),
      )
    }

    return []
  }

  // Format th√¥ng tin m√≥n ƒÉn
  formatDishInfo(dishes) {
    if (dishes.length === 0) {
      return "Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn ph√π h·ª£p."
    }

    let response = `T√¨m th·∫•y ${dishes.length} m√≥n ph√π h·ª£p:\n\n`
    dishes.slice(0, 5).forEach((dish, index) => {
      response += `${index + 1}. ${dish.name}\n`
      response += `   üí∞ Gi√°: ${dish.price?.toLocaleString()}ƒë\n`
      response += `   ‚è±Ô∏è Th·ªùi gian: ${dish.cookingTime}\n`
      response += `   üî• Calories: ${dish.calories} kcal\n`
      response += `   üìù ${dish.description}\n\n`
    })

    if (dishes.length > 5) {
      response += `V√† ${dishes.length - 5} m√≥n kh√°c...`
    }

    return response
  }
}

export default new GeminiAIService()
